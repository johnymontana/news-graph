name: Flat

on:
  push:
    paths:
      - .github/workflows/flat.yml # Only run a new workflow every time this file (flat.yaml) file changes
  workflow_dispatch: # Required even though this is currently empty
  schedule:
    - cron: '0 8 * * *' # Run this workflow every day at 8am

jobs:
  scheduled:
    runs-on: ubuntu-latest
    steps: # This workflow has 3 steps
      # The first step is to check out the repository so it can read the files inside of it and do other operations
      - name: Check out repo
        uses: actions/checkout@v2
      # This step installs Deno, which is a new Javascript runtime that improves on Node. We'll use it for postprocessing later
      - name: Setup deno
        uses: denoland/setup-deno@main
        with:
          deno-version: v1.x
      # The third step is a Flat Action step. We fetch the data in the http_url and save it as downloaded_filename
      - name: Fetch viewed
        uses: githubocto/flat@v2
        with:
          http_url: https://api.nytimes.com/svc/mostpopular/v2/viewed/1.json?api-key=${{secrets.NYT_API_KEY}}
          downloaded_filename: viewed.json
      - name: Fetch emailed
        uses: githubocto/flat@v2
        with:
          http_url: https://api.nytimes.com/svc/mostpopular/v2/emailed/1.json?api-key=${{secrets.NYT_API_KEY}}
          downloaded_filename: emailed.json
      - name: Fetch shared
        uses: githubocto/flat@v2
        with:
          http_url: https://api.nytimes.com/svc/mostpopular/v2/shared/1.json?api-key=${{secrets.NYT_API_KEY}}
          downloaded_filename: shared.json
      - name: Flat Graph Shared news.graph.zone
        uses: johnymontana/flat-graph@v1.1
        with:
          neo4j-user: ${{secrets.NEO4J_USER}}
          neo4j-password: ${{secrets.NEO4J_PASSWORD}}
          neo4j-uri: ${{secrets.NEO4J_URI}}
          filename: 'shared.json'
          cypher-query: > 
            UNWIND $value.results AS article
            MERGE (a:Article {url: article.url})
            SET a.title     = article.title,
            a.abstract  = article.abstract,
            a.published = article.published_date,
            a.byline    = article.byline
            FOREACH (desc IN article.des_facet | 
              MERGE (d:Topic {name: desc})
              MERGE (a)-[:HAS_TOPIC]->(d)
            )
            FOREACH (per IN article.per_facet |
              MERGE (p:Person {name: per})
              MERGE (a)-[:ABOUT_PERSON]->(p)
            )
            FOREACH (org IN article.org_facet |
             MERGE (o:Organization {name: org})
             MERGE (a)-[:ABOUT_ORGANIZATION]->(o)
            )
            FOREACH (geo IN article.geo_facet |
             MERGE (g:Geo {name: geo})
             MERGE (a)-[:ABOUT_GEO]->(g)
             )
             MERGE (p:Photo {url: coalesce(article.media[0]["media-metadata"][2].url, "NA")})
             SET p.caption = article.media[0].caption
             MERGE (a)-[:HAS_PHOTO]->(p)
             RETURN COUNT(*) AS num
      - name: Flat Graph Emailed news.graph.zone
        uses: johnymontana/flat-graph@v1.1
        with:
          neo4j-user: ${{secrets.NEO4J_USER}}
          neo4j-password: ${{secrets.NEO4J_PASSWORD}}
          neo4j-uri: ${{secrets.NEO4J_URI}}
          filename: 'emailed.json'
          cypher-query: > 
            UNWIND $value.results AS article
            MERGE (a:Article {url: article.url})
            SET a.title     = article.title,
            a.abstract  = article.abstract,
            a.published = article.published_date,
            a.byline    = article.byline
            FOREACH (desc IN article.des_facet | 
              MERGE (d:Topic {name: desc})
              MERGE (a)-[:HAS_TOPIC]->(d)
            )
            FOREACH (per IN article.per_facet |
              MERGE (p:Person {name: per})
              MERGE (a)-[:ABOUT_PERSON]->(p)
            )
            FOREACH (org IN article.org_facet |
             MERGE (o:Organization {name: org})
             MERGE (a)-[:ABOUT_ORGANIZATION]->(o)
            )
            FOREACH (geo IN article.geo_facet |
             MERGE (g:Geo {name: geo})
             MERGE (a)-[:ABOUT_GEO]->(g)
             )
             MERGE (p:Photo {url: coalesce(article.media[0]["media-metadata"][2].url, "NA")})
             SET p.caption = article.media[0].caption
             MERGE (a)-[:HAS_PHOTO]->(p)
             RETURN COUNT(*) AS num
      - name: Flat Graph Viewed news.graph.zone
        uses: johnymontana/flat-graph@v1.1
        with:
          neo4j-user: ${{secrets.NEO4J_USER}}
          neo4j-password: ${{secrets.NEO4J_PASSWORD}}
          neo4j-uri: ${{secrets.NEO4J_URI}}
          filename: 'viewed.json'
          cypher-query: > 
            UNWIND $value.results AS article
            MERGE (a:Article {url: article.url})
            SET a.title     = article.title,
            a.abstract  = article.abstract,
            a.published = article.published_date,
            a.byline    = article.byline
            FOREACH (desc IN article.des_facet | 
              MERGE (d:Topic {name: desc})
              MERGE (a)-[:HAS_TOPIC]->(d)
            )
            FOREACH (per IN article.per_facet |
              MERGE (p:Person {name: per})
              MERGE (a)-[:ABOUT_PERSON]->(p)
            )
            FOREACH (org IN article.org_facet |
             MERGE (o:Organization {name: org})
             MERGE (a)-[:ABOUT_ORGANIZATION]->(o)
            )
            FOREACH (geo IN article.geo_facet |
             MERGE (g:Geo {name: geo})
             MERGE (a)-[:ABOUT_GEO]->(g)
             )
             MERGE (p:Photo {url: coalesce(article.media[0]["media-metadata"][2].url, "NA")})
             SET p.caption = article.media[0].caption
             MERGE (a)-[:HAS_PHOTO]->(p)
             RETURN COUNT(*) AS num
      - name: Geocode geos
        uses: johnymontana/flat-graph@v1.1
        with:
          neo4j-user: ${{secrets.NEO4J_USER}}
          neo4j-password: ${{secrets.NEO4J_PASSWORD}}
          neo4j-uri: ${{secrets.NEO4J_URI}}
          filename: 'viewed.json'
          cypher-query: > 
            MATCH (g:Geo) WHERE g.location IS NULL
            WITH g LIMIT 100
            CALL apoc.spatial.geocodeOnce(replace(replace(g.name, "(", ""), ")", "")) YIELD location
            SET g.location    = point({latitude: location.latitude, longitude: location.longitude}), 
            g.description = location.description
            RETURN *