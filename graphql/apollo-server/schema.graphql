type Article @exclude(operations: [CREATE, UPDATE, DELETE]) {
  abstract: String
  published: Date
  title: String
  url: String!
  photo: Photo! @relationship(type: "HAS_PHOTO", direction: OUT)
  authors: [Author!]! @relationship(type: "BYLINE", direction: OUT)
  topics: [Topic!]! @relationship(type: "HAS_TOPIC", direction: OUT)
  people: [Person!]! @relationship(type: "ABOUT_PERSON", direction: OUT)
  organizations: [Organization!]!
    @relationship(type: "ABOUT_ORGANIZATION", direction: OUT)
  geos: [Geo!]! @relationship(type: "ABOUT_GEO", direction: OUT)
}

type Author @exclude(operations: [CREATE, UPDATE, DELETE]) {
  name: String!
  articles: [Article!]! @relationship(type: "BYLINE", direction: IN)
}

type Topic @exclude(operations: [CREATE, UPDATE, DELETE]) {
  name: String!
  articles: [Article!]! @relationship(type: "HAS_TOPIC", direction: IN)
}

type Person @exclude(operations: [CREATE, UPDATE, DELETE]) {
  name: String!
  articles: [Article!]!
    @relationship(type: "ABOUT_PERSON", direction: IN)
}

type Organization @exclude(operations: [CREATE, UPDATE, DELETE]) {
  name: String!
  articles: [Article!]!
    @relationship(type: "ABOUT_ORGANIZATION", direction: IN)
}

type Geo @exclude(operations: [CREATE, UPDATE, DELETE]) {
  name: String!
  location: Point
  articles: [Article!]! @relationship(type: "ABOUT_GEO", direction: IN)
}

type Photo @exclude(operations: [CREATE, UPDATE, DELETE]) {
  caption: String
  url: String!
  article: Article! @relationship(type: "HAS_PHOTO", direction: IN)
}

# @cypher schema directive fields

extend type Topic {
  articleCount: Int
    @cypher(statement: "RETURN SIZE( (this)<-[:HAS_TOPIC]-(:Article) )")
}

extend type Article {
  similar(first: Int = 3): [Article]
    @cypher(
      statement: """
      MATCH (this)-[:HAS_TOPIC]->(t:Topic)
      WITH this, COLLECT(id(t)) AS t1
      MATCH (a:Article)-[:HAS_TOPIC]->(t:Topic) WHERE a <> this
      WITH this, a, t1, COLLECT(id(t)) AS t2
      WITH a, gds.alpha.similarity.jaccard(t1, t2) AS jaccard
      ORDER BY jaccard DESC
      RETURN a LIMIT toInteger($first)
      """
    )
}

extend type Person {
  description: String
    @cypher(
      statement: """
      WITH this, apoc.static.get('gcpkey') AS gcpkey,
        'https://kgsearch.googleapis.com/v1/entities:search?query=' AS baseURL
      CALL apoc.load.json(baseURL + apoc.text.urlencode(this.name) + '&limit=1&key=' + gcpkey)
      YIELD value
      RETURN value.itemListElement[0].result.detailedDescription.articleBody
      """
    )
}
